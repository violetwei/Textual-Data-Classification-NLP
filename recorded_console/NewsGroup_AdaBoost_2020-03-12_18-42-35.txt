Downloading 20news dataset. This may take a few minutes.
Downloading dataset from https://ndownloader.figshare.com/files/5975967 (14 MB)
/Users/violetwei/anaconda3/lib/python3.7/site-packages/sklearn/feature_extraction/text.py:1616: UserWarning: Only (<class 'numpy.float64'>, <class 'numpy.float32'>, <class 'numpy.float16'>) 'dtype' should be used. int32 'dtype' will be converted to np.float64.
  UserWarning)

Vectorized all data shape:  (18846, 20000)

Vectorized training data shape:  (11314, 20000)

Vectorized training data shape:  (7532, 20000)
model fitting started
Starting model Prediction

NewsGroup AdaBoost Model Classification Accuracy Score: 0.36471056824216674

Classification Report:               precision    recall  f1-score   support

           0       0.00      0.00      0.00       319
           1       0.60      0.22      0.32       389
           2       0.64      0.37      0.47       394
           3       0.47      0.31      0.37       392
           4       0.68      0.36      0.47       385
           5       0.71      0.43      0.54       395
           6       0.77      0.51      0.62       390
           7       0.80      0.38      0.51       396
           8       0.91      0.32      0.47       398
           9       0.76      0.19      0.30       397
          10       0.64      0.58      0.61       399
          11       0.81      0.43      0.56       396
          12       0.08      0.83      0.15       393
          13       0.87      0.21      0.34       396
          14       0.76      0.35      0.48       394
          15       0.52      0.64      0.57       398
          16       0.47      0.23      0.31       364
          17       0.95      0.51      0.66       376
          18       0.28      0.17      0.21       310
          19       0.20      0.02      0.04       251

    accuracy                           0.36      7532
   macro avg       0.60      0.35      0.40      7532
weighted avg       0.61      0.36      0.41      7532

NewsGroup AdaBoost Model Confusion Matrix: 
 [[  0   0   0   1   0   3   1   0   0   0   3   4 191   1   5  94   5   1
    8   2]
 [  0  84  16  11   7  24   2   1   0   0   3   2 231   0   7   0   1   0
    0   0]
 [  0  21 147  28  14  27   1   1   0   0   1   0 148   1   3   0   2   0
    0   0]
 [  0  11  26 120  10   4   5   0   0   0   1   2 209   1   3   0   0   0
    0   0]
 [  1   3   1  27 140   0   9   0   0   0   3   5 189   0   4   0   0   0
    3   0]
 [  0   8  25   4   3 170   4   0   0   0   0   3 170   0   2   0   0   1
    4   1]
 [  0   6   4  22   9   1 199   9   2   0   3   2 127   0   3   2   1   0
    0   0]
 [  0   0   1  12   0   2   8 150   4   0   1   1 205   0   1   1   9   0
    1   0]
 [  0   0   1  11   0   1   4   7 128   1   1   1 231   2   1   4   4   0
    1   0]
 [  0   1   0   3   0   0   4   0   0  74  94   1 212   0   0   1   2   0
    1   4]
 [  0   0   0   0   0   1   7   0   1  16 232   0 137   0   0   1   1   0
    1   2]
 [  0   0   0   1   6   1   0   0   2   0   0 172 168   0   3   1  13   1
   28   0]
 [  0   4   3  13   6   2   6  12   1   1   2  13 326   0   2   0   1   0
    1   0]
 [  1   0   0   0   1   0   1   0   0   0   0   0 295  83   0  10   1   0
    4   0]
 [  1   0   2   2   9   1   2   3   1   0   8   2 212   4 136   1   2   0
    8   0]
 [  3   1   0   0   0   0   1   0   0   0   0   0 123   0   1 254   0   4
    3   8]
 [  0   0   2   1   0   3   2   1   2   1   6   3 197   0   4  12  84   1
   44   1]
 [  1   0   0   0   0   0   0   0   0   1   2   1 134   0   1  16   8 191
   20   1]
 [  0   0   1   0   1   0   0   1   0   3   4   0 201   3   1   8  34   0
   52   1]
 [  1   0   1   1   0   0   1   2   0   0   0   1 136   0   1  84   9   2
    7   5]]

HYPERPARAMETRE TUNING
Fitting 3 folds for each of 4 candidates, totalling 12 fits
[Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
[Parallel(n_jobs=1)]: Done  12 out of  12 | elapsed: 48.9min finished
>>>>> Optimized params
{'learning_rate': 1.0, 'n_estimators': 100}
>>>>>> Display the top results of grid search cv
   mean_fit_time  std_fit_time  ...  std_test_score  rank_test_score
3     315.555600     15.578198  ...        0.007633                1
2     150.510858      8.163937  ...        0.004542                2
1     325.620011      7.885894  ...        0.006960                3
0     166.575094      1.156280  ...        0.015579                4

[4 rows x 13 columns]
Using our training-dataset optimized adaboost model on the testing dataset for evaluating
score = 0.428173

Process finished with exit code 0
