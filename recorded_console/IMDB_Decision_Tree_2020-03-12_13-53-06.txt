$ python imdb_decision_tree.py
[Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
[Parallel(n_jobs=1)]: Done  27 out of  27 | elapsed: 43.5min finished

Vectorized all data shape:  (50000, 20000)

Vectorized training data shape:  (25000, 20000)

Vectorized training data shape:  (25000, 20000)
model fitting started
Starting model Prediction

IMDB Decision Tree Model Classification Accuracy Score: 0.71204

Classification Report:               precision    recall  f1-score   support

    Positive       0.71      0.72      0.71     12500
    Negative       0.71      0.71      0.71     12500

    accuracy                           0.71     25000
   macro avg       0.71      0.71      0.71     25000
weighted avg       0.71      0.71      0.71     25000

IMDB Decision Tree Model Confusion Matrix:
 [[8853 3647]
 [3552 8948]]

HYPERPARAMETRE TUNING
Fitting 3 folds for each of 9 candidates, totalling 27 fits
>>>>> Optimized params
{'max_depth': 20, 'min_samples_split': 500}
>>>>>> Display the top results of grid search cv
   mean_fit_time  std_fit_time  ...  std_test_score  rank_test_score
5      95.959543      9.429574  ...        0.003070                1
3     109.355860      1.662914  ...        0.005732                2
4     106.145227      2.082164  ...        0.004847                3
8     159.572838     20.864299  ...        0.003178                4
6     162.785946      7.039726  ...        0.002483                5

[5 rows x 13 columns]
Using our training-dataset optimized decision tree model on the testing dataset for evaluating
score = 0.734760
